1. Node.js란?
  1) ~ 1995년 이전 : HTML + CSS -> 웹사이트 개발
     ~ 1995년 이후 : HTML + CSS + JavaScript -> 웹사이트 개발

  2) JavaScript
     - Netscape사에서 개발한 live script -> Mocha 재런칭 -> JavaScript 12월 발표

  3) 브라우저에서 지원하는 자바스크립트 엔진
     - 사파리(Safari) : JavaScript Core
     - Internet Explorer : Chakara
     - Firefox : Spider Monkey
     - Chrome : v8 엔진(JIT : Just-in-time comilation)
     - Edge(MS) : Chakara -> 2021년도에 v8 엔진 탑재

  4) 2009년 Ryan Dahl이 Node.js를 발표
     - Deno : TypeScript 런타임 최초 개발자

  5) Node.js는
     '크롬의 V8엔진을 탑재하고 있는 자바스크립트 런타임 환경이다'
     JavaScript code outside a web browser.

  6) Browser vs Node.js
     Browser -> 동적인 웹 어플리케이션 구현 가능 ---- Web API - Windows, Document, Ajax, JSON...
     Node.js -> 서버와 서버 간의 렌더링, 백엔드 서버 구현, 프론트엔드 개발 등... ---- Node API

2. Node.js를 어떻게 공부할 것인가?
  1) Node의 구조를 정확히 이해하고 실행방식을 기억한다.
  2) Node에서 제공하는 API를 잘 사용할 줄 알아야 한다.
     API는 자바스크립트 문법으로 작성되었으므로, 문법을 정확히 익히도록 한다.
  3) 개발을 편리하게 지원하는 프레임워크를 익힌다.
     Node.js -> Express, Rust
     Web API(브라우저) -> React, Vue

3. Node.js 특징 4가지
  1) JavaScript Runtime
     - V8 엔진 탑재 -> EcmaScript 6, Open Source, Node API...
  2) Single Thread
     - Process(Multi Thread) vs Threadl
  3) Non-Blocking(비동기적) IO(Input Output)
  4) Event - Driven
    
4. 실행환경 만들기
  1) Node.js 설치 : https://nodejs.org
  2) 터미널 툴 설치
     - 윈도우용 터미널 : https://cmder.app/
     - 맥용 터미널 : https://iterm2.com/
  3) 개발 툴 설치 : VSCode 등...
  4) Git 설치 및 GitHub 연동

5. REPL - 터미널 환경에서 실행
     R : Read, E : Eval, P : Print, L : Loop

6. console 로그에 대한 API 검색 및 활용 - 2.console.js 참고

7. this 정리(this global, object 판단) - 3.this.js 참고

8. export/require - node, Blocking
   export/import - JavaScript, Non-Blocking
   노드는 blocking 방식이므로  비동기 방식인 자바스크립트 타입으로 export/import 불가능

9. Node - API
   1) os - 운영체제 정보
   2) Process
   3) Path
   4) FileSystem
   5) Stream & Buffer

10. NPM(Node Package Manager | 하나의 큰 레파지토리로 볼 수 있음)
    - npmjs.com
    - 노드에서 외부 라이브러리 사용과 프로젝트 관리를 위함
    - 오픈 소스로 제공되며, 천백만명의 개발자들이 사용하는 커뮤니티
      백만개 이상의 라이브러리 존재
    - NPX는 다운로드하여 저장하지 않고 바로 실행
    - yarn는 페이스북에서 라이브러리 커뮤니티로 npm에서 제기되는 문제점을 해결하고자 만듦, React에서 주로 사용되며 NPM과 호환됨

11. http/https
   1) http/https
----------------------------------------------------------------------------
   <HTTP> HyperText Transfer Protocol
      (request - response protocol)

            request(URL : http://www.naver.com/index.do)
      client ------------------------------> server
             <------------------------------ 
                      response(HTML)
                           ㄴ> 데이터를 가로채는 경우 다소 발생
----------------------------------------------------------------------------
   <HTTPS> HyperText Transfer Protocol Secure

            request(URL : https://www.naver.com/index.do)
      client ------------------------------> server
             <------------------------------ 
            response(HTML) : SSL, TSL등 공개키를 사용한 암호화되어 전송
                           ㄴ> 데이터를 가로채는 경우 감소
----------------------------------------------------------------------------
   2) Status Codes
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
    - 클라이언트가 요청한 처리상태를 서버가 숫자(3자리 숫자, 5개 범위)로 전송하는 코드
       - 100번대 : Informational
         100(Continue) - 요청이 정상적이며, 계속 진행 가능
         102(Processing) - 요청한 것을 아직 처리 중

       - 200번대 : Successful
         200(ok) - 성공한 메세지
         201(Created) - 클라이언트가 요청한 리소스 생성이 성공함
         204(No Content) - 클라이언트 요청 처리 완료. 전송할 컨텐츠는 없음

      300번대 : Redirection
         301(Moved Permanently) - 요청한 페이지가 영구적으로 다른 곳으로 이동
         302(Found) - 요청한 페이지가 임시로 다른 곳으로 이동
         303(See Other) - 302와 동일한 의미, 단 GET 방식만 사용 가능

      400번대 : Client error
         400(Bad Request) - 요청한 쿼리가 잘못된 경우
            - 쿼리 : 주소에서 ? 뒤의 문자열 | 쿼리는 메소드 GET방식으로만 사용 가능
         401(Unauthorized ) - 로그인 등 권한이 없는 클라이언트가 요청한 경우
         403(Forbidden) - 로그인한 사용자이지만 특정한 일을 수행할 권한이 없음
         404(Not Found) - URL이 존재하지 않을 때
         405(Method Not Allowed) - 요청한 기능이 허용되지 않을 때

      500번대 : Server error
         500(Internal Server Error) - 서버에서 요청을 처리할 수 없는 경우 전송
         502(Bad Gateway) - 중간에 서버 요청을 어떻게 처리해야 할지 모르는 경우 전송
         503(Service Unavailable) - URL에서 요청한 특정한 처리를 하기 위한 준비가 안됐을 때

   3) Request

   4) http Headers





///////////////////////////////////////////////////////////////////////////////////
  node -> node.js 진입
  ctrl + c 누르고 .exit node.js에서 나오기
  node.js는 자바스크립트 환경에서 실행되고, js파일 실행 시 확장자 생략 가능
  node.js 버전 별 문서 : https://nodejs.org/docs/latest-v18.x/api/documentation.html
/////////////////////////////////////////////////////////////////////////////////////

  1. npm init --yes
  2. json 파일 생성
   {
  "name": "code",
  "version": "1.0.0",
  "description": "",
  "type":"module",//2.자바스크립트 문법으로 체크
  "main": "5.e_counter.js",//1.이 파일을 
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}
